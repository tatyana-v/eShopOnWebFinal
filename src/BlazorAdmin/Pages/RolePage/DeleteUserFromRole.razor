@inject ILogger<Delete> Logger
@inject IJSRuntime JSRuntime
@inject IRoleManagementService RoleManagementService

@inherits BlazorAdmin.Helpers.BlazorComponent

@namespace BlazorAdmin.Pages.RolePage

@using BlazorAdmin.Interfaces
@using BlazorAdmin.Models
@using Microsoft.AspNetCore.Identity


<div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">            
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Role Membership Update</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="container">
                        <div class="row">
                            <p>
                                Are you sure you want to <strong class="text-danger">REMOVE</strong> @_userName from @_roleName?
                            </p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Cancel</button>
                    <button class="btn btn-danger" @onclick="() => DeleteClick()">
                        Delete
                    </button>
                </div>
        </div>
    </div>
</div>

@if (_showDeleteModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public EventCallback<string> OnSaveClick { get; set; }

    private string _modalDisplay = "none;";
    private string _modalClass = "";
    private bool _showDeleteModal = false;
    private string _roleName = "";

    private string _roleId = "";

    private string _userId = "";
    private string _userName = "";

    private async Task DeleteClick()
    {
        Logger.LogInformation("Removing User {userId} from Role {roleId}", _userId, _roleId);
        await RoleManagementService.DeleteUserFromRole(_userId, _roleId);

        Logger.LogInformation("Removed User {userId} from {roleId}", _userId, _roleId);
        await OnSaveClick.InvokeAsync(null);
        await Close();

    }

    public async Task Open(string userId, string userName, string roleName, string roleId)
    {
        _roleName = roleName;
        _userName = userName;

        _roleId = roleId;

        _userId = userId;

        await new Css(JSRuntime).HideBodyOverflow();

        _modalDisplay = "block;";
        _modalClass = "Show";
        _showDeleteModal = true;

        StateHasChanged();
    }

    private async Task Close()
    {
        await new Css(JSRuntime).ShowBodyOverflow();
        _modalDisplay = "none";
        _modalClass = "";
        _showDeleteModal = false;
    }
}
